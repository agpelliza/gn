{"tagline":"gn is the simplest file generator you could ever find.","body":"GN(1)\r\n\r\nNAME\r\n      gn -- The simplest template generator.\r\n\r\nSYNOPSIS\r\n      gn <plan>\r\n      gn -i <plan-url>\r\n      gn -h\r\n\r\nDESCRIPTION\r\n      <plan>\r\n          Opens the blueprints with the default editor, and once saved\r\n          it expands the templates.\r\n\r\n      -i <plan-url>\r\n          Installs the given plan from a git repository. It clones the\r\n          repository to ~/.gn/<plan>.\r\n\r\n      -h\r\n          Display this help message.\r\n\r\nEXAMPLE PLAN\r\n      A plan is a directory in ~/.gn/<plan>, with the following\r\n      structure:\r\n\r\n          ~/.gn/<plan>/plan.rb\r\n          ~/.gn/<plan>/plan/<template>.mote\r\n\r\n      For example, consider a plan for generating a gemspec file.\r\n\r\n          ~/.gn/gemspec/plan.rb\r\n          ~/.gn/gemspec/plan/gemspec.mote\r\n\r\n      The plan definition `plan.rb` has this format:\r\n\r\n          module Plan\r\n            class GemSpec\r\n              def name\r\n                \"foo\"\r\n              end\r\n\r\n              def version\r\n                \"0.0.1\"\r\n              end\r\n\r\n              def description\r\n                \"Description of my gem\"\r\n              end\r\n\r\n              def authors\r\n                [\"My Name\"]\r\n              end\r\n\r\n              def email\r\n                [\"my_name@example.com\"]\r\n              end\r\n\r\n              def homepage\r\n                \"http://example.com/\"\r\n              end\r\n\r\n              def license\r\n                \"MIT\"\r\n              end\r\n\r\n              def destination\r\n                \"#{name}.gemspec\"\r\n              end\r\n            end\r\n          end\r\n\r\n      The only mandatory method is `destination`. Everything else is\r\n      optional and is based on how the template is designed.\r\n\r\n      Templates are rendered using mote (http://soveran.github.com/mote),\r\n      the minimalist template engine. Variable interpolation is\r\n      done by using the {{variable}} syntax, as shown in the example\r\n      below. Variable names are extracted from the plan context, in this\r\n      case an instance of `Plan::GemSpec`.\r\n\r\n          # encoding: utf-8\r\n\r\n          Gem::Specification.new do |s|\r\n            s.name              = \"{{name}}\"\r\n            s.version           = \"{{version}}\"\r\n            s.summary           = \"{{description}}\"\r\n            s.description       = \"{{description}}\"\r\n            s.authors           = {{authors.inspect}}\r\n            s.email             = {{email.inspect}}\r\n            s.homepage          = \"{{homepage}}\"\r\n            s.files             = []\r\n            s.license           = \"{{license}}\"\r\n            # s.executables.push(<executable>)\r\n            # s.add_dependency <dependency>, <version>\r\n          end\r\n\r\n      Refer to de advanced example for information about how to\r\n      generate different files and directory structures.\r\n\r\nADVANCED EXAMPLE\r\n      It is possible to use gn to generate several files and even\r\n      complex directory structures. Consider this plan definition:\r\n\r\n          $ find .gn/foo\r\n          .gn/foo//plan.rb\r\n          .gn/foo//plan/foo.mote\r\n          .gn/foo//plan/bar/baz.mote\r\n\r\n          $ cat plan.rb\r\n          module Plan\r\n            class Foo\r\n              def destination\r\n                \"foo.rb\"\r\n              end\r\n            end\r\n\r\n            module Bar\r\n              class Bar\r\n                def destination\r\n                  \"bar/baz.rb\"\r\n                end\r\n              end\r\n            end\r\n          end\r\n\r\nEDITING A PLAN\r\n      When using a template, gn gives you the ability to edit the plan\r\n      before running it. Only the templates that correspond to classes\r\n      defined in the Plan module get expanded and written. It means\r\n      that if you want to create only the file `foo.rb` in the example\r\n      above, all you have to do is delete the Bar module from the plan\r\n      definition.\r\n\r\nINSTALLATION\r\n      $ gem install gn\r\n\r\nHISTORY\r\n      In software development, there's usually the need to generate\r\n      code or directory structures, and many tools have this feature\r\n      built in. The idea with gn is to provide a small and simple tool\r\n      that generalizes the task of template expansion in a way that's\r\n      easy to understand, yet powerful and flexible.\r\n","note":"Don't delete this file! It's used internally to help with page regeneration.","name":"Gn","google":""}